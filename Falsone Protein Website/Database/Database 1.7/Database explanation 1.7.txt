Explanation of the Team Falsone group project database

In this project the aim was to create a website containing information on all known human kinases, inhibitors of those kinases, and providing the ability for a user to upload their own results to process and present a summary of the activity of human kinases acted on by inhibitors. 
The relational database was therefore laid out to best store information on kinases and their relationships with inhibitors, substrates and modified residue phosphosites, as well as the relationships between kinases and inhibitors. Written in SQLite3, this relational database was curated in DB Browser for SQlite, where the schema was loaded and the data imported from csv files.
The first main table in the database; ‘Kinase’, stores the main bulk of information on all known human kinases. This includes name, Uniprot accession number, gene symbol, gene family, cellular location, genomic location and protein long name. The primary key of this table is the kinase name, which will be unique per entry, and this table has no foreign key dependencies.
The second table ‘Alt names’ was a direct offshoot of the ‘Kinase’ table. There was a recurrent issue within the data in which a kinase was often not referred to by its agreed kinase name and was instead either referred to by any of its many alternative names, long names or gene symbols. This information all needed to be stored in the database, so that inhibitor or substrate data that didn’t directly refer to a kinase name could be linked back to its corresponding kinase in the ‘Kinase’ table. The ‘Alt names’ table was simply laid out with fields for a kinase name, a corresponding alternative name and a unique ID (which formed the primary key). Any one kinase could be present in the table as many times as there were alternative names for it, and there were also some minor redundancies in which an alternative name could be mapped back to two different kinases (which is a scientific integrity issue, data should not be referred to by names which do not directly map back to one specific entity). In this table a foreign key existed for the kinase name field, referencing the kinase names field in ‘Kinase’, ensuring that every kinase in the alternative names list was actually referring to a human kinase. 
Each kinase in the ‘Kinase’ table had multiple sites that it was known to phosphorylate on different substrates. All of this data also needed to be stored within the database. In order to fully normalize the schema and ensure minimal redundancies in the database, substrate information is distributed between three different tables; one with information on each substrate, one for information on each phosphosite present for each substrate, and one relationship table mapping the substrate phosphosites to at least one kinase. 
The ‘Substrate’ table is also simply laid out, with fields for the Uniprot accession number of each substrate in the data, along with the name of the substrate and its main gene name. With no foreign key dependencies, the primary key in this table is the substrate name. #
The ‘Substrate phosphosite’ table is designed to give information for each phosphosite available for the substrates in the substrate table. This information includes the substrate name, modified residue in the substrate, the position at which it is modified, and the neighbouring sequence surrounding the modified residue. This table also assigns a substrate-kinase-ID which will link a substrate name/site combination to a kinase via a relationship table. In this table substrate name is stored again, however it was sub-optimal to have this, and the ‘substrate’ table merged into one, as the same names, symbols and accessions were all repeated multiple times throughout the table while in this schema it is just substrate name which is repeated. In this table the substrate-kinase-ID is the primary key, as each ID is only present once and each combination of substrate and phosphosite is given its own ID. The foreign key in this table is Substrate name, referencing the substrate table which also contains substrate name. This ensures that each phosphosite is actually referring to an existing substrate in the database. 
The table ‘Substrate site kinase’ is a relational table which maps each phosphosite-substrate instance in the ‘substrate phosphosite’ table to each of the kinase it corresponds to. In this table there are fields for a unique ID (the primary key), substrate-kinase-ID (a foreign key referencing the ID given to each phosphosite in the previous table), and a kinase corresponding to that phosphosite. Each kinase can be present multiple times in this table acting on several substrates, and each phosphosite can be acted on by multiple kinases, necessitating this table which links the kinases and substrates together. For data integrity, the kinase field in this table also has a foreign key referencing the ‘alt names’ table, ensuring that the kinase given in the data that acts on the substrate exists.
The ‘Inhibitor’ table holds required information for inhibitors in the dataset. This information includes an assigned inhibitor ID, the name of the inhibitor, chemical structure of the inhibitor and an image link to the structure of the inhibitor. The primary key of this table was the inhibitor ID, with no foreign key dependencies. 
The relationship table ‘Kinase-inhibitor’ stores information on how each inhibitor acts on kinases, and how each kinase is acted on by multiple inhibitors. In this table there are fields for a Unique ID (primary key for the table), an inhibitor ID (a foreign key which references an inhibitor ID assigned in the ‘inhibitor’ table), and a kinase which that inhibitor is known to inhibit. For integrity the kinase name given in this table is also a foreign key referencing the kinase names in the alternative names table, ensuring that the kinase given in the inhibitor data is actually a human kinase in the database. 
